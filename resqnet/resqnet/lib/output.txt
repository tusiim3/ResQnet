------lib\firebase_options.dart
// File generated by FlutterFire CLI.
// ignore_for_file: type=lint
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'AIzaSyB64LDcI7YG2ArTjXsXDWHlp00BcBOzUeE',
    appId: '1:341222348718:web:1caa58b341648c15a99a3f',
    messagingSenderId: '341222348718',
    projectId: 'smartbodahelmet',
    authDomain: 'smartbodahelmet.firebaseapp.com',
    storageBucket: 'smartbodahelmet.firebasestorage.app',
    measurementId: 'G-R0TJEQZH4J',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'AIzaSyDpqckP9SVY0RE93yiIzvY4e1-_t1-zY24',
    appId: '1:341222348718:android:624a84f071548cc8a99a3f',
    messagingSenderId: '341222348718',
    projectId: 'smartbodahelmet',
    storageBucket: 'smartbodahelmet.firebasestorage.app',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'AIzaSyD86pAUXVDz4R1ouWtF-PMZMs46XPc4fK8',
    appId: '1:341222348718:ios:20f96d4dfa3e4d3ca99a3f',
    messagingSenderId: '341222348718',
    projectId: 'smartbodahelmet',
    storageBucket: 'smartbodahelmet.firebasestorage.app',
    iosBundleId: 'com.example.resqnet',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'AIzaSyD86pAUXVDz4R1ouWtF-PMZMs46XPc4fK8',
    appId: '1:341222348718:ios:20f96d4dfa3e4d3ca99a3f',
    messagingSenderId: '341222348718',
    projectId: 'smartbodahelmet',
    storageBucket: 'smartbodahelmet.firebasestorage.app',
    iosBundleId: 'com.example.resqnet',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'AIzaSyB64LDcI7YG2ArTjXsXDWHlp00BcBOzUeE',
    appId: '1:341222348718:web:e6bae70328bfef43a99a3f',
    messagingSenderId: '341222348718',
    projectId: 'smartbodahelmet',
    authDomain: 'smartbodahelmet.firebaseapp.com',
    storageBucket: 'smartbodahelmet.firebasestorage.app',
    measurementId: 'G-X02W9Y7XZN',
  );

}
================================================================================

------lib\main.dart
import 'package:flutter/material.dart';
import 'package:shared_preferences/shared_preferences.dart';  // Fixed import line
import 'package:firebase_core/firebase_core.dart';
import 'firebase_options.dart';
import 'services/sms_service.dart';
import 'screens/Login_Screen.dart'; // Ensure this import path is correct

Future<void> main() async {
  WidgetsFlutterBinding.ensureInitialized();

  await Firebase.initializeApp(
    options: DefaultFirebaseOptions.currentPlatform,
  );

  // Initialize SMS services
  bool smsPermissionCurrentlyGranted = false; // Default or check here if needed
  try {
    // You might want to check the actual permission status here
    // for example: final status = await Permission.sms.status;
    // smsPermissionCurrentlyGranted = status.isGranted;
    await SmsService.loadTrustedNumberFromFirestore();
    SmsService.initSmsListener();
  } catch (e) {
    print('Error initializing SMS services: $e');
  }

  final prefs = await SharedPreferences.getInstance();
  final isDark = prefs.getBool('isDarkTheme') ?? false;

  runApp(MyApp(isDarkTheme: isDark, smsPermissionGranted: smsPermissionCurrentlyGranted));
}

class MyApp extends StatelessWidget {
  final bool isDarkTheme;
  final bool smsPermissionGranted; // Added this parameter

  const MyApp({super.key, required this.isDarkTheme, required this.smsPermissionGranted});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      // Consider setting themeMode based on isDarkTheme here
      theme: ThemeData.light(),
      darkTheme: ThemeData.dark(),
      themeMode: isDarkTheme ? ThemeMode.dark : ThemeMode.light,
      home: LoginScreen(
        toggleTheme: (bool isDark) {
          // This toggleTheme function currently does nothing in MyApp.
          // You might want to pass it down to LoginScreen to actually change the theme.
          // For now, it's a placeholder.
        },
        isDarkTheme: isDarkTheme,
        smsPermissionGranted: smsPermissionGranted,
      ),
    );
  }
}

================================================================================

------lib\output.txt

================================================================================

------lib\config\api_config.dart
class ApiConfig {
  // Google Maps API Key
  static const String googleMapsApiKey = 'AIzaSyCGYjT7qcHOVr8NXJ0Y_d0dRRICLkMnan0';

  // i had added Firebase Configuration but later realises Okure already handled it in firebase_options.dart. Mann😂😭

  // in case we need these endpoints too
  static const String emergencyServicesApi = 'https://api.emergency-services.com';
  static const String geocodingApi = 'https://maps.googleapis.com/maps/api/geocode/json';

  // API Configuration for different environments
  static const bool isProduction = bool.fromEnvironment('dart.vm.product');

  static String get mapsApiKey {
    return googleMapsApiKey;
  }

  static bool get isConfigured {
    return googleMapsApiKey != 'AIzaSyCGYjT7qcHOVr8NXJ0Y_d0dRRICLkMnan0' &&
        googleMapsApiKey.isNotEmpty;
  }
}

class EnvironmentConfig {
  static const String development = 'development';
  static const String production = 'production';

  static String get currentEnvironment {
    return isProduction ? production : development;
  }

  static bool get isProduction {
    return bool.fromEnvironment('dart.vm.product');
  }

  // Different configurations for different environments
  static Map<String, dynamic> get config {
    if (isProduction) {
      return {
        'apiTimeout': 30000,
        'locationUpdateInterval': 5000,
        'emergencyTimeout': 10000,
        'maxRetries': 3,
      };
    } else {
      return {
        'apiTimeout': 10000,
        'locationUpdateInterval': 2000,
        'emergencyTimeout': 5000,
        'maxRetries': 1,
      };
    }
  }
}

================================================================================

------lib\controllers\sms_controller.dart
import 'package:telephony/telephony.dart';
import '../services/sms_service.dart';

class SmsController {
  final Telephony telephony = Telephony.instance;

  void handleIncomingSms(SmsMessage message) {
    final sender = message.address ?? "";
    final body = message.body ?? "";

    // Use the static getter from SmsService
    final String? trustedHardwareContact = SmsService.hardwareContact;

    print("Incoming SMS from: $sender, Body: $body");
    print("Expected trusted hardware contact: $trustedHardwareContact");

    if (trustedHardwareContact != null && sender == trustedHardwareContact) {
      doCustomTask(body);
      // Use the static sendSms method
      SmsService.sendSms(sender, "Task completed successfully!");
    } else {
      print("Unauthorized SMS access attempt from: $sender");
    }
  }

  void doCustomTask(String body) {
    print("Received message for custom task: '$body'");
    print("Performing custom task logic...");
  }
}
================================================================================

------lib\models\location_model.dart
class LocationModel {
  final double latitude;
  final double longitude;

  LocationModel({required this.latitude, required this.longitude});
}

================================================================================

------lib\models\user_model.dart

================================================================================

------lib\screens\alert_feed_screen.dart

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:resqnet/screens/map_screen.dart';

class AlertFeedScreen extends StatefulWidget {
  final Function(bool) toggleTheme;
  final bool isDarkTheme;
  const AlertFeedScreen({super.key, required this.toggleTheme, required this.isDarkTheme});

  @override
  State<AlertFeedScreen> createState() => _AlertFeedScreenState();
}

class _AlertFeedScreenState extends State<AlertFeedScreen> {
  List<AlertItem> alerts = [
    AlertItem(
      id: '1',
      title: 'Crash Alert - Urgent',
      time: '2 minutes ago',
      location: 'Kampala Road, near Garden City',
      status: AlertStatus.urgent,
      isResolved: false,
    ),
    AlertItem(
      id: '2',
      title: 'Minor Incident',
      time: '15 minutes ago',
      location: 'Jinja Road, Stage',
      status: AlertStatus.info,
      isResolved: false,
    ),
    AlertItem(
      id: '3',
      title: 'Resolved: Breakdown',
      time: '1 hour ago',
      location: 'Entebbe Road',
      status: AlertStatus.resolved,
      isResolved: true,
    ),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: const Color(0xFFF8F9FA),
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(110),
        child: AppBar(
          backgroundColor: Colors.white,
          elevation: 0,
          systemOverlayStyle: SystemUiOverlayStyle.dark,
          automaticallyImplyLeading: false,
          titleSpacing: 0,
          title: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const SizedBox(height: 8),
              Center(
                child: RichText(
                  text: TextSpan(
                    style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold, fontFamily: 'Arial'),
                    children: [
                      TextSpan(
                        text: 'Res',
                        style: TextStyle(color: Colors.red[700]),
                      ),
                      TextSpan(
                        text: 'Q',
                        style: TextStyle(color: Colors.red[700]),
                      ),
                      TextSpan(
                        text: 'net',
                        style: TextStyle(color: Color(0xFF1976D2)),
                      ),
                    ],
                  ),
                ),
              ),

            ],
          ),
          bottom: PreferredSize(
            preferredSize: const Size.fromHeight(40),
            child: Padding(
              padding: const EdgeInsets.only(bottom: 10, left: 16, right: 16),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  // IconButton(
                  //   icon: const Icon(Icons.arrow_back, color: Color(0xFF2C3E50)),
                  //   onPressed: () => Navigator.pop(context),
                  // ),
                  const SizedBox(width: 2),
                  const Text(
                    'Alert Feed',
                    style: TextStyle(
                      color: Color(0xFF2C3E50),
                      fontWeight: FontWeight.w600,
                      fontSize: 20,
                    ),
                  ),
                  Spacer(),
                  IconButton(
                    icon: const Icon(Icons.refresh, color: Color(0xFF4A90E2)),
                    onPressed: () {
                      _refreshAlerts();
                    },
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
      body: RefreshIndicator(
        onRefresh: _refreshAlerts,
        child: ListView.builder(
          padding: const EdgeInsets.all(20),
          itemCount: alerts.length,
          itemBuilder: (context, index) {
            return _buildAlertCard(alerts[index]);
          },
        ),
      ),
    );
  }

  Widget _buildAlertCard(AlertItem alert) {
    return Container(
      margin: const EdgeInsets.only(bottom: 15),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.1),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
        border: alert.status == AlertStatus.urgent
            ? const Border(
                left: BorderSide(color: Color(0xFFE74C3C), width: 5),
              )
            : null,
      ),
      child: Padding(
        padding: const EdgeInsets.all(20),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // Alert Header
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        alert.title,
                        style: const TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w600,
                          color: Color(0xFF2C3E50),
                        ),
                      ),
                      const SizedBox(height: 5),
                      Text(
                        alert.time,
                        style: const TextStyle(
                          fontSize: 12,
                          color: Color(0xFF7F8C8D),
                        ),
                      ),
                    ],
                  ),
                ),
                _buildStatusBadge(alert.status),
              ],
            ),
            
            const SizedBox(height: 15),
            
            // Location
            Row(
              children: [
                const Text(
                  '📍',
                  style: TextStyle(fontSize: 16),
                ),
                const SizedBox(width: 8),
                Expanded(
                  child: Text(
                    alert.location,
                    style: const TextStyle(
                      fontSize: 14,
                      color: Color(0xFF7F8C8D),
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 15),
            
            // Action Buttons (only show if not resolved)
            if (!alert.isResolved) ...[
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () {
                        _respondToAlert(alert);
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF2ECC71),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                      child: const Text(
                        'Respond',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 10),
                  Expanded(
                    child: ElevatedButton(
                      onPressed: () {
                        _dismissAlert(alert);
                      },
                      style: ElevatedButton.styleFrom(
                        backgroundColor: const Color(0xFF95A5A6),
                        shape: RoundedRectangleBorder(
                          borderRadius: BorderRadius.circular(8),
                        ),
                        padding: const EdgeInsets.symmetric(vertical: 12),
                      ),
                      child: const Text(
                        'Dismiss',
                        style: TextStyle(
                          fontSize: 16,
                          fontWeight: FontWeight.w500,
                          color: Colors.white,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildStatusBadge(AlertStatus status) {
    Color backgroundColor;
    Color textColor;
    String text;

    switch (status) {
      case AlertStatus.urgent:
        backgroundColor = const Color(0xFFFFE8E8);
        textColor = const Color(0xFFE74C3C);
        text = 'URGENT';
        break;
      case AlertStatus.info:
        backgroundColor = const Color(0xFFFFF3CD);
        textColor = const Color(0xFF856404);
        text = 'INFO';
        break;
      case AlertStatus.resolved:
        backgroundColor = const Color(0xFFD4E6F1);
        textColor = const Color(0xFF2C3E50);
        text = 'RESOLVED';
        break;
    }

    return Container(
      padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
      decoration: BoxDecoration(
        color: backgroundColor,
        borderRadius: BorderRadius.circular(12),
      ),
      child: Text(
        text,
        style: TextStyle(
          fontSize: 12,
          fontWeight: FontWeight.w500,
          color: textColor,
        ),
      ),
    );
  }

  void _respondToAlert(AlertItem alert) {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(15),
          ),
          title: const Text(
            'Respond to Alert',
            style: TextStyle(
              fontSize: 18,
              fontWeight: FontWeight.w600,
              color: Color(0xFF2C3E50),
            ),
          ),
          content: Text(
            'Are you sure you want to respond to this alert at ${alert.location}?',
            style: const TextStyle(
              fontSize: 16,
              color: Color(0xFF7F8C8D),
            ),
          ),
          actions: [
            TextButton(
              onPressed: () {
                Navigator.of(context).pop();
              },
              child: const Text(
                'Cancel',
                style: TextStyle(
                  color: Color(0xFF95A5A6),
                  fontWeight: FontWeight.w500,
                ),
              ),
            ),
            ElevatedButton(
              onPressed: () {
                Navigator.of(context).pop();
                _handleResponse(alert);
              },
              style: ElevatedButton.styleFrom(
                backgroundColor: const Color(0xFF2ECC71),
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(8),
                ),
              ),
              child: const Text(
                'Confirm',
                style: TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.w600,
                ),
              ),
            ),
          ],
        );
      },
    );
  }

  void _dismissAlert(AlertItem alert) {
    setState(() {
      alerts.removeWhere((item) => item.id == alert.id);
    });
    
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content: Text('Alert dismissed'),
        backgroundColor: Color(0xFF95A5A6),
      ),
    );
  }

  void _handleResponse(AlertItem alert) {
    // TODO: Implement response logic
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Responding to alert at ${alert.location}'),
        backgroundColor: const Color(0xFF2ECC71),
      ),
    );
    
    // Navigate to map screen with alert location
    Navigator.push(
      context,
      MaterialPageRoute(
        builder: (context) => MapScreen(toggleTheme: widget.toggleTheme, isDarkTheme: widget.isDarkTheme),
      ),
    );
  }

  Future<void> _refreshAlerts() async {
    // TODO: Implement refresh logic to fetch new alerts
    await Future.delayed(const Duration(seconds: 1));
    
    setState(() {
      // Simulate adding a new alert
      alerts.insert(0, AlertItem(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        title: 'New Alert',
        time: 'Just now',
        location: 'Nakasero Road',
        status: AlertStatus.info,
        isResolved: false,
      ));
    });
  }
}

// Alert data model
class AlertItem {
  final String id;
  final String title;
  final String time;
  final String location;
  final AlertStatus status;
  final bool isResolved;

  AlertItem({
    required this.id,
    required this.title,
    required this.time,
    required this.location,
    required this.status,
    required this.isResolved,
  });
}

enum AlertStatus {
  urgent,
  info,
  resolved,
}


================================================================================

------lib\screens\home_screen.dart
import 'package:flutter/material.dart';
import 'package:resqnet/screens/map_screen.dart';
import 'package:resqnet/screens/alert_feed_screen.dart';
import 'package:resqnet/screens/profile_screen.dart';
import 'package:url_launcher/url_launcher.dart';

class HomeScreen extends StatefulWidget {
  final Function(bool) toggleTheme;
  final bool isDarkTheme;
  const HomeScreen({super.key, required this.toggleTheme, required this.isDarkTheme});

  @override
  State<HomeScreen> createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  int _currentIndex = 0;

  List<Widget> get _screens => [
    _HomeTab(toggleTheme: widget.toggleTheme, isDarkTheme: widget.isDarkTheme),
    MapScreen(toggleTheme: widget.toggleTheme, isDarkTheme: widget.isDarkTheme),
    AlertFeedScreen(toggleTheme: widget.toggleTheme, isDarkTheme: widget.isDarkTheme),
    ProfileScreen(toggleTheme: widget.toggleTheme, isDarkTheme: widget.isDarkTheme),
  ];

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Theme.of(context).scaffoldBackgroundColor,

      body: _screens[_currentIndex],
      bottomNavigationBar: Container(
        padding: const EdgeInsets.all(16),
        decoration: BoxDecoration(
          color: Theme.of(context).colorScheme.surface,
          borderRadius: BorderRadius.circular(15),
          boxShadow: [
            BoxShadow(
              color: Colors.black.withOpacity(0.1),
              blurRadius: 8,
              offset: const Offset(0, 4),
            ),
          ],
        ),
        child: Row(
          mainAxisAlignment: MainAxisAlignment.spaceAround,
          children: [
            _buildBottomNavItem(
              icon: Icons.home,
              label: 'Home',
              isActive: _currentIndex == 0,
              onTap: () => setState(() => _currentIndex = 0),
            ),
            _buildBottomNavItem(
              icon: Icons.map,
              label: 'Map',
              isActive: _currentIndex == 1,
              onTap: () => setState(() => _currentIndex = 1),
            ),
            _buildBottomNavItem(
              icon: Icons.notifications,
              label: 'Alerts',
              isActive: _currentIndex == 2,
              onTap: () => setState(() => _currentIndex = 2),
            ),
            _buildBottomNavItem(
              icon: Icons.person,
              label: 'Profile',
              isActive: _currentIndex == 3,
              onTap: () => setState(() => _currentIndex = 3),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildBottomNavItem({
    required IconData icon,
    required String label,
    required bool isActive,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Column(
        mainAxisSize: MainAxisSize.min,
        children: [
          Icon(
            icon,
            color: isActive ? Theme.of(context).colorScheme.primary : Theme.of(context).disabledColor,
            size: 24,
          ),
          const SizedBox(height: 4),
          Text(
            label,
            style: TextStyle(
              fontSize: 12,
              color: isActive ? Theme.of(context).colorScheme.primary : Theme.of(context).disabledColor,
              fontWeight: FontWeight.w500,
            ),
          ),
        ],
      ),
    );
  }
}

// Extract the original home tab content to a separate widget
class _HomeTab extends StatelessWidget {
  final Function(bool) toggleTheme;
  final bool isDarkTheme;
  final bool isOnline = true;
  final int tripsToday = 24;
  final int totalTrips = 156;
  final String userName = "Baelish 😎!";
  final List<EmergencyContact> emergencyContacts = [
    EmergencyContact(name: "Police", number: "999", icon: "🚔"),
    EmergencyContact(name: "Ambulance", number: "911", icon: "🚑"),
    EmergencyContact(name: "Fire", number: "998", icon: "🚒"),
  ];

  _HomeTab({required this.toggleTheme, required this.isDarkTheme});

  String greeting() {
    int time = DateTime.now().hour;
    if (time > 0 && time < 12) {
      return "Good Morning";
    } else if (time < 16) {
      return "Good Afternoon";
    } else {
      return "Good Evening";
    }
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: SingleChildScrollView(
        child: Padding(
          padding: const EdgeInsets.all(20.0),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.stretch,
            children: [
              // Header Section
              Row(
                mainAxisAlignment: MainAxisAlignment.spaceBetween,
                children: [
                  Expanded(
                    child: Text(
                      "${greeting()}, $userName",
                      style: const TextStyle(
                        fontSize: 20,
                        fontWeight: FontWeight.w700,
                        color: Color(0xFF2C3E50),
                      ),
                      overflow: TextOverflow.ellipsis,
                    ),
                  ),
                  const SizedBox(width: 10),
                  Container(
                    padding: const EdgeInsets.symmetric(
                      horizontal: 12,
                      vertical: 6,
                    ),
                    decoration: BoxDecoration(
                      color: const Color(0xFF2ECC71),
                      borderRadius: BorderRadius.circular(15),
                    ),
                    child: const Text(
                      'Online',
                      style: TextStyle(
                        fontSize: 12,
                        fontWeight: FontWeight.w600,
                        color: Colors.white,
                      ),
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 30),

              // Stats Grid
              Row(
                children: [
                  Expanded(
                    child: _buildStatCard(context,
                      number: tripsToday.toString(),
                      label: 'Trips Today',
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: _buildStatCard(context,
                      number: totalTrips.toString(),
                      label: 'Total Trips',
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 30),

              // Emergency Button
              Container(
                width: double.infinity,
                height: 60,
                decoration: BoxDecoration(
                  gradient: const LinearGradient(
                    begin: Alignment.topLeft,
                    end: Alignment.bottomRight,
                    colors: [Color(0xFFFF6B6B), Color(0xFFFF6B6B)],
                  ),
                  borderRadius: BorderRadius.circular(15),
                  boxShadow: [
                    BoxShadow(
                      color: const Color(
                        0xFFE74C3C,
                      ).withAlpha((0.3 * 255).toInt()),
                      blurRadius: 10,
                      offset: const Offset(0, 5),
                    ),
                  ],
                ),
                child: ElevatedButton(
                  onPressed: () {
                    // _showEmergencyDialog();
                  },
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.transparent,
                    shadowColor: Colors.transparent,
                    shape: RoundedRectangleBorder(
                      borderRadius: BorderRadius.circular(15),
                    ),
                  ),
                  child: const Row(
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: [
                      Text('🚨', style: TextStyle(fontSize: 24)),
                      SizedBox(width: 10),
                      Text(
                        'Emergency Alert',
                        style: TextStyle(
                          fontSize: 18,
                          fontWeight: FontWeight.w600,
                          color: Colors.white,
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 20),

              // Quick Actions
              Row(
                children: [
                  Expanded(
                    child: _buildActionButton(context,
                      icon: '📍',
                      label: 'View Map',
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => MapScreen(toggleTheme: toggleTheme, isDarkTheme: isDarkTheme),
                          ),
                        );
                      },
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: _buildActionButton(context,
                      icon: '🔔',
                      label: 'Alerts',
                      onTap: () {
                        Navigator.push(
                          context,
                          MaterialPageRoute(
                            builder: (context) => AlertFeedScreen(toggleTheme: toggleTheme, isDarkTheme: isDarkTheme),
                          ),
                        );
                      },
                    ),
                  ),
                ],
              ),

              const SizedBox(height: 30),

              // Emergency Contacts Section
              Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Theme.of(context).cardColor,
                  borderRadius: BorderRadius.circular(15),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 8,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Emergency Contacts',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w600,
                        color: Color(0xFF2C3E50),
                      ),
                    ),
                    const SizedBox(height: 15),
                    ...emergencyContacts.map((contact) => _buildEmergencyContact(context, contact)),
                  ],
                ),
              ),

              const SizedBox(height: 20),

              // Recent Activity Section
              Container(
                padding: const EdgeInsets.all(20),
                decoration: BoxDecoration(
                  color: Theme.of(context).cardColor,
                  borderRadius: BorderRadius.circular(15),
                  boxShadow: [
                    BoxShadow(
                      color: Colors.black.withOpacity(0.1),
                      blurRadius: 8,
                      offset: const Offset(0, 4),
                    ),
                  ],
                ),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Recent Activity',
                      style: TextStyle(
                        fontSize: 18,
                        fontWeight: FontWeight.w600,
                        color: Color(0xFF2C3E50),
                      ),
                    ),
                    const SizedBox(height: 15),
                    _buildActivityItem(context, '🚨 Responded to crash alert', '2 minutes ago'),
                    _buildActivityItem(context, '📍 Location shared', '15 minutes ago'),
                    _buildActivityItem(context, '✅ Trip completed', '1 hour ago'),
                  ],
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildStatCard(BuildContext context, {required String number, required String label}) {
    return Container(
      padding: const EdgeInsets.all(20),
      decoration: BoxDecoration(
        color: Theme.of(context).cardColor,
        borderRadius: BorderRadius.circular(15),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withAlpha((0.1 * 255).toInt()),
            blurRadius: 8,
            offset: const Offset(0, 4),
          ),
        ],
      ),
      child: Column(
        children: [
          Text(
            number,
            style: const TextStyle(
              fontSize: 28,
              fontWeight: FontWeight.w700,
              color: Color(0xFF4A90E2),
            ),
          ),
          const SizedBox(height: 5),
          Text(
            label,
            style: TextStyle(fontSize: 14, color: Theme.of(context).hintColor),
            textAlign: TextAlign.center,
          ),
        ],
      ),
    );
  }

  Widget _buildActionButton(BuildContext context, {
    required String icon,
    required String label,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.all(15),
        decoration: BoxDecoration(
          color: const Color(0xFFF8F9FA),
          border: Border.all(color: const Color(0xFFE8E8E8), width: 2),
          borderRadius: BorderRadius.circular(10),
        ),
        child: Column(
          children: [
            Text(icon, style: const TextStyle(fontSize: 24)),
            const SizedBox(height: 8),
            Text(
              label,
              style: const TextStyle(
                fontSize: 16,
                fontWeight: FontWeight.w500,
                color: Color(0xFF2C3E50),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildEmergencyContact(BuildContext context, EmergencyContact contact) {
    return Container(
      margin: const EdgeInsets.only(bottom: 10),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFFF8F9FA),
        borderRadius: BorderRadius.circular(10),
        border: Border.all(color: const Color(0xFFE8E8E8)),
      ),
      child: Row(
        children: [
          Text(contact.icon, style: const TextStyle(fontSize: 20)),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  contact.name,
                  style: const TextStyle(
                    fontSize: 16,
                    fontWeight: FontWeight.w600,
                    color: Color(0xFF2C3E50),
                  ),
                ),
                Text(
                  contact.number,
                  style: const TextStyle(
                    fontSize: 14,
                    color: Color(0xFF7F8C8D),
                  ),
                ),
              ],
            ),
          ),
          IconButton(
            icon: const Icon(Icons.call, color: Color(0xFF2ECC71)),
            onPressed: () => _callEmergency(context, contact),
          ),
        ],
      ),
    );
  }

  Widget _buildActivityItem(BuildContext context, String activity, String time) {
    return Container(
      margin: const EdgeInsets.only(bottom: 10),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: const Color(0xFFF8F9FA),
        borderRadius: BorderRadius.circular(10),
      ),
      child: Row(
        children: [
          Expanded(
            child: Text(
              activity,
              style: const TextStyle(
                fontSize: 14,
                color: Color(0xFF2C3E50),
              ),
            ),
          ),
          Text(
            time,
            style: const TextStyle(
              fontSize: 12,
              color: Color(0xFF7F8C8D),
            ),
          ),
        ],
      ),
    );
  }

  void _callEmergency(BuildContext context, EmergencyContact contact) async {
    final Uri phoneUri = Uri(scheme: 'tel', path: contact.number);
    if (await canLaunchUrl(phoneUri)) {
      await launchUrl(phoneUri);
    } else {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Could not launch phone app.'),
          backgroundColor: Colors.red,
        ),
      );
    }
  }
}

class EmergencyContact {
  final String name;
  final String number;
  final String icon;

  EmergencyContact({
    required this.name,
    required this.number,
    required this.icon,
  });
}

================================================================================

------lib\screens\Login_Screen.dart
import 'package:flutter/material.dart';
import 'package:permission_handler/permission_handler.dart';
import 'package:resqnet/screens/register_screen.dart';
import 'package:resqnet/screens/Home_Screen.dart';
import 'package:resqnet/services/user_service.dart';
import 'package:resqnet/services/sms_service.dart';


class LoginScreen extends StatefulWidget {
  final Function(bool) toggleTheme;
  final bool isDarkTheme;
  final bool smsPermissionGranted; // Keep this as a required parameter

  const LoginScreen({
    super.key,
    required this.toggleTheme,
    required this.isDarkTheme,
    required this.smsPermissionGranted, // This parameter is required
  });

  @override
  State<LoginScreen> createState() => _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {
  final _formKey = GlobalKey<FormState>();
  final _phoneController = TextEditingController();
  final _passwordController = TextEditingController();
  bool _rememberMe = false;
  bool _obscurePassword = true;
  bool _showPermissionWarning = false;

  final UserService _userService = UserService();


  @override
  void initState() {
    super.initState();
    if (!widget.smsPermissionGranted) {
      WidgetsBinding.instance.addPostFrameCallback((_) {
        setState(() => _showPermissionWarning = true);
      });
    }
  }

  @override
  void dispose() {
    _phoneController.dispose();
    _passwordController.dispose();
    super.dispose();
  }

  Future<void> _requestSmsPermissions() async {
    final status = await Permission.sms.request();
    if (status.isGranted) {
      setState(() => _showPermissionWarning = false);
      await SmsService.loadTrustedNumberFromFirestore();
      SmsService.initSmsListener();
    } else if (status.isPermanentlyDenied) {
      await openAppSettings();
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white, // Consider using Theme.of(context).scaffoldBackgroundColor
      body: SafeArea(
        child: Stack(
          children: [
            SingleChildScrollView(
              child: Padding(
                padding: const EdgeInsets.symmetric(horizontal: 20.0),
                child: Column(
                  mainAxisAlignment: MainAxisAlignment.center,
                  crossAxisAlignment: CrossAxisAlignment.stretch,
                  children: [
                    if (_showPermissionWarning) ...[
                      _buildPermissionWarning(),
                      const SizedBox(height: 20),
                    ],
                    Form(
                      key: _formKey,
                      child: Column(
                        mainAxisAlignment: MainAxisAlignment.center,
                        crossAxisAlignment: CrossAxisAlignment.stretch,
                        children: [
                          const SizedBox(height: 80),
                          //Logo
                          Center(
                            child: Container(
                              padding: const EdgeInsets.only(bottom: 15),
                              width: 100,
                              height: 100,
                              decoration: BoxDecoration(
                                gradient: const LinearGradient(
                                  begin: Alignment.topLeft,
                                  end: Alignment.bottomRight,
                                  colors: [Color(0xFFFF6B6B), Color(0xFFFF8E8E)],
                                ),
                                borderRadius: BorderRadius.circular(20),
                              ),
                              child: const Center(
                                child: Text(
                                  '🏍️',
                                  style: TextStyle(
                                    fontSize: 40,
                                    fontWeight: FontWeight.bold,
                                    color: Colors.white,
                                  ),
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(height: 20),
                          //App Title
                          const Text(
                            'ResQnet',
                            style: TextStyle(
                              fontSize: 28,
                              fontWeight: FontWeight.w700,
                              color: Color(0xFF2C3E50), // Consider using Theme.of(context).textTheme
                            ),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 10),
                          //Subtitle
                          const Text(
                            'Stay Protected, Stay Connected',
                            style: TextStyle(
                              fontSize: 16,
                              fontWeight: FontWeight.w400,
                              color: Color(0xFF7F8C8D), // Consider using Theme.of(context).textTheme
                            ),
                            textAlign: TextAlign.center,
                          ),
                          const SizedBox(height: 40),
                          //Phone Number Field
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text(
                                'Phone Number',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                  color: Color(0xFF2C3E50), // Consider using Theme.of(context).textTheme
                                ),
                              ),
                              const SizedBox(height: 8),
                              TextFormField( // Removed const
                                controller: _phoneController,
                                keyboardType: TextInputType.phone,
                                decoration: InputDecoration(
                                  hintText: '+256 700 000 000',
                                  labelText: 'Phone Number',
                                  filled: true,
                                  fillColor: Colors.white, // Consider using Theme.of(context).inputDecorationTheme
                                  prefixIcon: const Icon(Icons.phone),
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: const BorderSide(
                                      color: Color(0xFFE8E8E8),
                                      width: 2,
                                    ),
                                  ),
                                  enabledBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: const BorderSide(
                                      color: Color(0xFFE8E8E8),
                                      width: 2,
                                    ),
                                  ),
                                  focusedBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: const BorderSide(
                                      color: Color(0xFF4A90E2),
                                      width: 2,
                                    ),
                                  ),
                                  contentPadding: const EdgeInsets.all(15),
                                ),
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Please enter your phone number';
                                  }
                                  return null;
                                },
                              ),
                            ],
                          ),
                          const SizedBox(height: 20),
                          //Password field
                          Column(
                            crossAxisAlignment: CrossAxisAlignment.start,
                            children: [
                              const Text(
                                'Password',
                                style: TextStyle(
                                  fontSize: 16,
                                  fontWeight: FontWeight.w500,
                                  color: Color(0xFF2C3E50), // Consider using Theme.of(context).textTheme
                                ),
                              ),
                              const SizedBox(height: 8),
                              TextFormField( // Removed const
                                controller: _passwordController,
                                decoration: InputDecoration(
                                  hintText: 'Enter your password',
                                  labelText: 'Password',
                                  filled: true,
                                  fillColor: Colors.white, // Consider using Theme.of(context).inputDecorationTheme
                                  border: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: const BorderSide(
                                      color: Color(0xFFE8E8E8),
                                      width: 2,
                                    ),
                                  ),
                                  enabledBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: const BorderSide(
                                      color: Color(0xFFE8E8E8),
                                      width: 2,
                                    ),
                                  ),
                                  focusedBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: const BorderSide(
                                      color: Color(0xFF4A90E2),
                                      width: 2,
                                    ),
                                  ),
                                  errorBorder: OutlineInputBorder(
                                    borderRadius: BorderRadius.circular(10),
                                    borderSide: const BorderSide(
                                      color: Color(0xFFC40C0C),
                                      width: 2,
                                    ),
                                  ),
                                  prefixIcon: const Icon(Icons.lock),
                                  suffixIcon: IconButton(
                                    icon: Icon(
                                      _obscurePassword
                                          ? Icons.visibility_off
                                          : Icons.visibility,
                                    ),
                                    onPressed: () {
                                      setState(() {
                                        _obscurePassword = !_obscurePassword;
                                      });
                                    },
                                  ),
                                  contentPadding: const EdgeInsets.all(15),
                                ),
                                validator: (value) {
                                  if (value == null || value.isEmpty) {
                                    return 'Please enter your password';
                                  }
                                  return null;
                                },
                                obscureText: _obscurePassword,
                              ),
                            ],
                          ),
                          const SizedBox(height: 16),
                          Row(
                            children: [
                              Checkbox(
                                value: _rememberMe,
                                onChanged: (value) {
                                  setState(() {
                                    _rememberMe = value!;
                                  });
                                },
                              ),
                              const Text('Remember Me'),
                              const Spacer(),
                              TextButton(
                                onPressed: () {
                                  _showForgotPasswordDialog();
                                },
                                child: const Text('Forgot Password?'),
                              ),
                            ],
                          ),
                          const SizedBox(height: 20),
                          // Login Button
                          Container(
                            width: double.infinity,
                            height: 50,
                            decoration: BoxDecoration(
                              gradient: const LinearGradient(
                                begin: Alignment.topLeft,
                                end: Alignment.bottomRight,
                                colors: [Color(0xFFFF6B6B), Color(0xFFFF8E8E)],
                              ),
                              borderRadius: BorderRadius.circular(10),
                            ),
                            child: ElevatedButton(
                              onPressed: () {
                                if (_formKey.currentState!.validate()) {
                                  _handleLogin();
                                }
                              },
                              style: ElevatedButton.styleFrom(
                                minimumSize: const Size(double.infinity, 50),
                                backgroundColor: Colors.transparent, // Button background color
                                shadowColor: Colors.transparent, // No shadow
                                shape: RoundedRectangleBorder(
                                  borderRadius: BorderRadius.circular(12),
                                ),
                              ),
                              child: const Text(
                                'Login',
                                style: TextStyle(
                                  fontSize: 18,
                                  fontWeight: FontWeight.w600,
                                  color: Colors.white,
                                ),
                              ),
                            ),
                          ),
                          const SizedBox(height: 20),
                          //Create Account Link
                          TextButton(
                            onPressed: () {
                              Navigator.push(
                                context,
                                MaterialPageRoute(
                                  builder: (context) => RegisterScreen( // Removed const
                                    toggleTheme: widget.toggleTheme,
                                    isDarkTheme: widget.isDarkTheme,
                                  ),
                                ),
                              );
                            },
                            child: const Text(
                              'Sign up, Create Account',
                              style: TextStyle(
                                fontSize: 16,
                                fontWeight: FontWeight.w500,
                                color: Color(0xFF4A90E2),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildPermissionWarning() {
    return Container(
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.orange[50],
        borderRadius: BorderRadius.circular(8),
      ),
      child: Row(
        children: [
          Icon(Icons.warning, color: Colors.orange[800]),
          const SizedBox(width: 10),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'SMS Permissions Required',
                  style: TextStyle(
                    fontWeight: FontWeight.bold,
                    color: Colors.orange[800]),
                ),
                const SizedBox(height: 4),
                Text(
                  'Enable SMS permissions for emergency alerts',
                  style: TextStyle(color: Colors.orange[800]),
                ),
              ],
            ),
          ),
          TextButton(
            onPressed: _requestSmsPermissions,
            child: Text(
              'ENABLE',
              style: TextStyle(color: Colors.orange[800]),
            ),
          ),
        ],
      ),
    );
  }

  void _showForgotPasswordDialog() {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Forgot Password'),
        content: const Text('Password reset link will be sent to your email.'),
        actions: [
          TextButton(
            onPressed: () => Navigator.pop(context),
            child: const Text('OK'),
          ),
        ],
      ),
    );
  }

  void _handleLogin() async {
    final phone = _phoneController.text.trim();
    final password = _passwordController.text.trim();

    showDialog(
      context: context,
      barrierDismissible: false,
      builder: (context) => const Center(child: CircularProgressIndicator()),
    );

    try {
      final userData = await _userService.getUserByPhone(phone);
      Navigator.of(context).pop();

      if (userData == null) {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('No user found with this phone number.')),
        );
        return;
      }

      if (userData['password'] == password) {
        Navigator.pushReplacement(
          context,
          MaterialPageRoute(
            builder: (context) => HomeScreen( // Removed const
              toggleTheme: widget.toggleTheme,
              isDarkTheme: widget.isDarkTheme,
            ),
          ),
        );
      } else {
        ScaffoldMessenger.of(context).showSnackBar(
          const SnackBar(content: Text('Incorrect password.')),
        );
      }
    } catch (e) {
      Navigator.of(context).pop();
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('Login failed: $e')),
      );
    }
  }
}

================================================================================

------lib\screens\map_screen.dart
import 'dart:async';
import 'package:flutter/material.dart';
import 'package:google_maps_flutter/google_maps_flutter.dart';
import 'package:shared_preferences/shared_preferences.dart';

class MapScreen extends StatefulWidget {
  final Function(bool) toggleTheme;
  final bool isDarkTheme;

  const MapScreen({
    super.key,
    required this.toggleTheme,
    required this.isDarkTheme,
  });

  @override
  State<MapScreen> createState() => _MapScreenState();
}

class _MapScreenState extends State<MapScreen> with AutomaticKeepAliveClientMixin {
  final Completer<GoogleMapController> _controller = Completer();
  LatLng? _destination;
  bool _mapReady = false;

  static const CameraPosition _initialPosition = CameraPosition(
    target: LatLng(0.315, 32.582), // Kampala coordinates
    zoom: 13.0, // Safer zoom to prevent surface overload
  );

  @override
  bool get wantKeepAlive => true;

  @override
  void initState() {
    super.initState();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _loadDestinationFromSMS();
    });
  }

  Future<void> _loadDestinationFromSMS() async {
    final prefs = await SharedPreferences.getInstance();
    final lastMessage = prefs.getString('last_location_message');

    if (lastMessage != null) {
      final match = RegExp(r'^.+ - ([\-0-9.]+), ?([\-0-9.]+)$').firstMatch(lastMessage);
      if (match != null) {
        final lat = double.parse(match.group(1)!);
        final lng = double.parse(match.group(2)!);
        _destination = LatLng(lat, lng);
      }
    }

    setState(() {
      _mapReady = true;
    });
  }

  @override
  Widget build(BuildContext context) {
    super.build(context); // required for keep-alive
    return Scaffold(
      appBar: AppBar(
        title: const Text('Map View'),
        actions: [
          IconButton(
            icon: Icon(widget.isDarkTheme ? Icons.wb_sunny : Icons.nightlight_round),
            onPressed: () => widget.toggleTheme(!widget.isDarkTheme),
          ),
        ],
      ),
      body: _mapReady
          ? GoogleMap(
              initialCameraPosition: _initialPosition,
              myLocationEnabled: true,
              onMapCreated: (GoogleMapController controller) {
                _controller.complete(controller);
              },
              markers: _destination != null
                  ? {
                      Marker(
                        markerId: const MarkerId('destination'),
                        position: _destination!,
                        infoWindow: const InfoWindow(title: "Emergency Location"),
                      )
                    }
                  : {},
            )
          : const Center(child: CircularProgressIndicator()),
    );
  }
}

================================================================================

------lib\screens\profile_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:image_picker/image_picker.dart';
import 'dart:io';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:geolocator/geolocator.dart';
// Import Firestore
import 'package:firebase_auth/firebase_auth.dart'; // Import Firebase Auth
import 'Login_Screen.dart'; // Ensure this import path is correct
import '../services/user_service.dart'; // Import your UserService


class ProfileScreen extends StatefulWidget {
  final Function(bool) toggleTheme;
  final bool isDarkTheme;

  const ProfileScreen({super.key, required this.toggleTheme, required this.isDarkTheme});


  @override
  State<ProfileScreen> createState() => _ProfileScreenState();
}

class _ProfileScreenState extends State<ProfileScreen> with SingleTickerProviderStateMixin {
  // Initial values, these will be updated from Firestore
  String userName = "Loading...";
  String userEmail = "Loading...";
  String userPhone = "Loading...";
  String userLocation = "Loading...";
  String userHardwareContact = "Loading..."; // New field for hardware contact
  int totalTrips = 0;
  int responseRate = 0;
  double rating = 0.0;

  File? _profileImage;
  bool notificationsEnabled = false;
  bool locationEnabled = false;
  String currentLocation = '';
  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();

  late TabController _tabController;
  final UserService _userService = UserService(); // Instance of UserService
  final FirebaseAuth _auth = FirebaseAuth.instance; // Instance of FirebaseAuth

  bool _isLoadingProfile = true; // State to manage loading indicator


  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 3, vsync: this);
    _initNotifications();
    _loadProfileData(); // Load profile data from Firestore
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }


  /// Initializes local notifications.
  Future<void> _initNotifications() async {
    const AndroidInitializationSettings initializationSettingsAndroid = AndroidInitializationSettings('@mipmap/ic_launcher');
    const InitializationSettings initializationSettings = InitializationSettings(android: initializationSettingsAndroid);
    await flutterLocalNotificationsPlugin.initialize(initializationSettings);
  }


  /// Shows a test notification to confirm notifications are enabled.
  Future<void> _showTestNotification() async {
    const AndroidNotificationDetails androidDetails = AndroidNotificationDetails(
      'profile_channel',
      'Profile Notifications',
      channelDescription: 'Profile notification channel',
      importance: Importance.max,
      priority: Priority.high,
      showWhen: false,
    );
    const NotificationDetails platformDetails = NotificationDetails(android: androidDetails);
    await flutterLocalNotificationsPlugin.show(
      0,
      'Test Notification',
      'Notifications are enabled!',
      platformDetails,
    );
  }


  /// Toggles the notification setting and saves it to SharedPreferences.
  Future<void> _toggleNotifications() async {
    setState(() {
      notificationsEnabled = !notificationsEnabled;
    });
    if (notificationsEnabled) await _showTestNotification();
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('notificationsEnabled', notificationsEnabled);
  }


  /// Toggles the location setting and requests permissions if needed.
  /// Saves the setting and current location to SharedPreferences.
  Future<void> _toggleLocation() async {
    if (!locationEnabled) {
      bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
      if (!serviceEnabled) {
        await Geolocator.openLocationSettings();
        return;
      }
      LocationPermission permission = await Geolocator.checkPermission();
      if (permission == LocationPermission.denied) {
        permission = await Geolocator.requestPermission();
        if (permission == LocationPermission.denied) {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(content: Text('Location permission denied'), backgroundColor: Colors.red),
            );
          }
          return;
        }
      }
      if (permission == LocationPermission.deniedForever) {
        if (mounted) {
          ScaffoldMessenger.of(context).showSnackBar(
            const SnackBar(content: Text('Location permanently denied'), backgroundColor: Colors.red),
          );
        }
        return;
      }
      Position pos = await Geolocator.getCurrentPosition(desiredAccuracy: LocationAccuracy.high);
      setState(() {
        locationEnabled = true;
        currentLocation = '${pos.latitude}, ${pos.longitude}';
      });
    } else {
      setState(() {
        locationEnabled = false;
        currentLocation = '';
      });
    }
    final prefs = await SharedPreferences.getInstance();
    await prefs.setBool('locationEnabled', locationEnabled);
    await prefs.setString('currentLocation', currentLocation);
  }


  /// Loads user profile data from Firestore and SharedPreferences.
  Future<void> _loadProfileData() async {
    setState(() {
      _isLoadingProfile = true; // Start loading
    });


    final User? user = _auth.currentUser;
    if (user != null) {
      final userData = await _userService.getUserData(user.uid); // Fetch user data by UID
      if (userData != null) {
        setState(() {
          userName = userData['fullName'] ?? 'N/A';
          userEmail = userData['email'] ?? 'N/A';
          userPhone = userData['phone'] ?? 'N/A';
          userHardwareContact = userData['hardwareContact'] ?? 'N/A'; // Get hardware contact
          // You might fetch totalTrips, responseRate, rating from Firestore as well if they are stored there
          // For now, keeping them as default or existing values if not in Firestore
        });
      }
    }

    // Load local preferences as well
    final prefs = await SharedPreferences.getInstance();
    setState(() {
      notificationsEnabled = prefs.getBool('notificationsEnabled') ?? false;
      locationEnabled = prefs.getBool('locationEnabled') ?? false;
      currentLocation = prefs.getString('currentLocation') ?? '';
      _isLoadingProfile = false; // End loading
    });
  }


  /// Allows the user to pick a profile image from the gallery.
  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final picked = await picker.pickImage(source: ImageSource.gallery);
    if (picked != null) {
      setState(() => _profileImage = File(picked.path));
    }
  }


  /// Shows a dialog to edit profile information and saves changes to Firestore.
  void _editProfile() {
    final nameCtrl = TextEditingController(text: userName);
    final emailCtrl = TextEditingController(text: userEmail);
    final phoneCtrl = TextEditingController(text: userPhone);
    final locationCtrl = TextEditingController(text: userLocation);
    final hardwareContactCtrl = TextEditingController(text: userHardwareContact); // Controller for hardware contact

    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Edit Profile'),
        content: SingleChildScrollView( // Use SingleChildScrollView for scrollable content
          child: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              TextField(controller: nameCtrl, decoration: const InputDecoration(labelText: 'Full Name')),
              TextField(controller: emailCtrl, decoration: const InputDecoration(labelText: 'Email')),
              TextField(controller: phoneCtrl, decoration: const InputDecoration(labelText: 'Phone')),
              TextField(controller: locationCtrl, decoration: const InputDecoration(labelText: 'Location')),
              TextField(controller: hardwareContactCtrl, decoration: const InputDecoration(labelText: 'Hardware Contact')), // Hardware Contact field
            ],
          ),
        ),
        actions: [
          TextButton(onPressed: () => Navigator.pop(context), child: const Text('Cancel')),
          ElevatedButton(
            onPressed: () async {
              final User? user = _auth.currentUser;
              if (user != null) {
                // Update user data in Firestore
                await _userService.updateUserData(
                  user.uid,
                  {
                    'fullName': nameCtrl.text,
                    'email': emailCtrl.text,
                    'phone': phoneCtrl.text,
                    'userLocation': locationCtrl.text, // Assuming you want to save this
                    'hardwareContact': hardwareContactCtrl.text, // Save hardware contact
                  },
                );
                // Refresh local state after saving
                await _loadProfileData();
              }
              if (mounted) {
                Navigator.pop(context);
              }
            },
            child: const Text('Save'),
          ),
        ],
      ),
    );
  }


  /// Shows an about dialog for the application.
  void _showAbout() {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('About ResQnet'),
        content: const Text('Version 1.0.0\n© 2025 ResQnet. All rights reserved.'),
        actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text('Close'))],
      ),
    );
  }


  /// Shows a help and support dialog.
  void _showHelp() {
    showDialog(
      context: context,
      builder: (_) => AlertDialog(
        title: const Text('Help & Support'),
        content: const Text('• How to update profile: Tap the edit button.\n• For support email: support@resqnet.com'),
        actions: [TextButton(onPressed: () => Navigator.pop(context), child: const Text('Close'))],
      ),
    );
  }


  /// Helper widget to display an info card.
  Widget _infoCard(String title, String value) => Column(
        children: [
          Text(value, style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold)),
          Text(title, style: const TextStyle(color: Colors.grey)),
        ],
      );

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Theme.of(context).appBarTheme.backgroundColor,
        elevation: 0,
        automaticallyImplyLeading: false,
        systemOverlayStyle: SystemUiOverlayStyle.dark,
        titleSpacing: 0,
        title: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            const SizedBox(height: 8),
            Center(
              child: RichText(
                text: TextSpan(
                  style: const TextStyle(fontSize: 28, fontWeight: FontWeight.bold, fontFamily: 'Arial'),
                  children: [
                    TextSpan(
                      text: 'Res',
                      style: TextStyle(color: Colors.red[700]),
                    ),
                    TextSpan(
                      text: 'Q',
                      style: TextStyle(color: Colors.red[700]),
                    ),
                    TextSpan(
                      text: 'net',
                      style: const TextStyle(color: Color(0xFF1976D2)),
                    ),
                  ],
                ),
              ),
            ),
          ],
        ),
        bottom: TabBar(
          controller: _tabController,
          labelColor: Theme.of(context).colorScheme.primary,
          unselectedLabelColor: Colors.grey,
          tabs: const [
            Tab(icon: Icon(Icons.bar_chart), text: 'Stats'),
            Tab(icon: Icon(Icons.settings), text: 'Settings'),
            Tab(icon: Icon(Icons.more_horiz), text: 'Actions'),
          ],
        ),
      ),
      body: _isLoadingProfile
          ? const Center(child: CircularProgressIndicator()) // Show loading indicator
          : TabBarView(
              controller: _tabController,
              children: [
                _buildStatsTab(),
                _buildSettingsTab(),
                _buildActionsTab(),
              ],
            ),
    );
  }

  Widget _buildStatsTab() => SingleChildScrollView(
        padding: const EdgeInsets.all(16),
        child: Column(
          children: [
            GestureDetector(
              onTap: _pickImage,
              child: CircleAvatar(
                radius: 50,
                backgroundColor: const Color(0xFF4A90E2),
                backgroundImage: _profileImage != null ? FileImage(_profileImage!) : null,
                child: _profileImage == null ? const Icon(Icons.person, color: Colors.white, size: 40) : null,
              ),
            ),
            const SizedBox(height: 12),
            Text(userName, style: const TextStyle(fontSize: 22, fontWeight: FontWeight.bold)),
            Text(userEmail, style: const TextStyle(color: Colors.grey)),
            Text(userPhone, style: const TextStyle(color: Colors.grey)),
            Text(userLocation, style: const TextStyle(color: Colors.grey)),
            const SizedBox(height: 16),
            Card(
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
              elevation: 2,
              child: Padding(
                padding: const EdgeInsets.all(16),
                child: Row(
                  mainAxisAlignment: MainAxisAlignment.spaceAround,
                  children: [
                    _infoCard('Total Trips', '$totalTrips'),
                    _infoCard('Response', '$responseRate%'),
                    _infoCard('Rating', '$rating'),
                  ],
                ),
              ),
            ),
          ],
        ),
      );

  Widget _buildSettingsTab() => ListView(
        padding: const EdgeInsets.all(16),
        children: [
          SwitchListTile(
            title: const Text('Enable Notifications'),
            value: notificationsEnabled,
            onChanged: (_) => _toggleNotifications(),
          ),
          SwitchListTile(
            title: const Text('Enable Location'),
            value: locationEnabled,
            onChanged: (_) => _toggleLocation(),
          ),
          SwitchListTile(
            title: const Text('Dark Mode'),
            subtitle: Text(widget.isDarkTheme ? 'Dark mode is ON' : 'Dark mode is OFF'),
            value: widget.isDarkTheme,
            onChanged: (val) => widget.toggleTheme(val),
          ),
          if (currentLocation.isNotEmpty)
            Padding(
              padding: const EdgeInsets.all(8.0),
              child: Text('Location: $currentLocation', style: const TextStyle(color: Colors.blueGrey)),
            ),
          // Display the hardware contact
          ListTile(
            title: const Text('Hardware Contact'),
            subtitle: Text(userHardwareContact),
            leading: const Icon(Icons.hardware),
          ),
        ],
      );

  Widget _buildActionsTab() => ListView(
        padding: const EdgeInsets.all(16),
        children: [
          ListTile(
            leading: const Icon(Icons.edit),
            title: const Text('Edit Profile'),
            onTap: _editProfile,
          ),
          ListTile(
            leading: const Icon(Icons.info_outline),
            title: const Text('About ResQnet'),
            onTap: _showAbout,
          ),
          ListTile(
            leading: const Icon(Icons.help_outline),
            title: const Text('Help & Support'),
            onTap: _showHelp,
          ),
          ListTile(
            leading: const Icon(Icons.logout, color: Color(0xFFE74C3C)),
            title: const Text('Logout'),
            onTap: () => Navigator.pushReplacement(
              context,
              MaterialPageRoute(
                builder: (_) => LoginScreen( // Removed const
                  toggleTheme: widget.toggleTheme,
                  isDarkTheme: widget.isDarkTheme,
                  smsPermissionGranted: false, // Added this, set to false or check actual status
                ),
              ),
            ),
          ),
        ],
      );
}

================================================================================

------lib\screens\register_screen.dart
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:resqnet/screens/home_screen.dart';
import 'package:resqnet/services/user_service.dart';
import 'package:resqnet/services/sms_service.dart';

class RegisterScreen extends StatefulWidget {
  final Function(bool) toggleTheme;
  final bool isDarkTheme;
  const RegisterScreen({super.key, required this.toggleTheme, required this.isDarkTheme});

  @override
  State<RegisterScreen> createState() => _RegisterScreenState();
}

class _RegisterScreenState extends State<RegisterScreen> {
  final _formKey = GlobalKey<FormState>();
  final _nameController = TextEditingController();
  final _usernameController = TextEditingController();
  final _emailController = TextEditingController();
  final _phoneController = TextEditingController();
  final _helmetContactController = TextEditingController();
  final _passwordController = TextEditingController();
  final _confirmPasswordController = TextEditingController();

  bool _obscurePassword = true;
  bool _obscureConfirmPassword = true;
  bool _isLoading = false;

  final UserService _userService = UserService();

  @override
  void dispose() {
    _nameController.dispose();
    _usernameController.dispose();
    _emailController.dispose();
    _phoneController.dispose();
    _helmetContactController.dispose();
    _passwordController.dispose();
    _confirmPasswordController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.white,
      appBar: PreferredSize(
        preferredSize: const Size.fromHeight(110),
        child: AppBar(
          backgroundColor: Colors.transparent,
          elevation: 0,
          systemOverlayStyle: SystemUiOverlayStyle.dark,
          automaticallyImplyLeading: false,
          titleSpacing: 0,
          title: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              const SizedBox(height: 8),
              Center(
                child: RichText(
                  text: TextSpan(
                    style: TextStyle(fontSize: 28, fontWeight: FontWeight.bold, fontFamily: 'Arial'),
                    children: [
                      TextSpan(
                        text: 'Res',
                        style: TextStyle(color: Colors.red[700]),
                      ),
                      TextSpan(
                        text: 'Q',
                        style: TextStyle(color: Colors.red[700]),
                      ),
                      TextSpan(
                        text: 'net',
                        style: TextStyle(color: Color(0xFF1976D2)),
                      ),
                    ],
                  ),
                ),
              ),
            ],
          ),
          bottom: PreferredSize(
            preferredSize: const Size.fromHeight(40),
            child: Padding(
              padding: const EdgeInsets.only(bottom: 10, left: 16, right: 16),
              child: Row(
                crossAxisAlignment: CrossAxisAlignment.center,
                children: [
                  IconButton(
                    icon: const Icon(Icons.arrow_back, color: Color(0xFF2C3E50)),
                    onPressed: () => Navigator.pop(context),
                  ),
                  const Spacer(),
                  const Text(
                    'Register',
                    style: TextStyle(
                      color: Color(0xFF2C3E50),
                      fontWeight: FontWeight.w600,
                      fontSize: 20,
                    ),
                  ),
                ],
              ),
            ),
          ),
        ),
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Form(
            key: _formKey,
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                const SizedBox(height: 40),
                Center(
                  child: Container(
                    padding: const EdgeInsets.only(bottom: 15),
                    width: 100,
                    height: 100,
                    decoration: BoxDecoration(
                      gradient: const LinearGradient(
                        begin: Alignment.topLeft,
                        end: Alignment.bottomRight,
                        colors: [Color(0xFFFF6B6B), Color(0xFFFF8E8E)],
                      ),
                      borderRadius: BorderRadius.circular(20),
                    ),
                    alignment: Alignment.center,
                    child: const Text(
                      '🏍️',
                      style: TextStyle(fontSize: 40, color: Colors.white),
                    ),
                  ),
                ),
                const SizedBox(height: 20),
                const Center(
                  child: Text(
                    'Join ResQnet',
                    style: TextStyle(
                      fontSize: 28,
                      fontWeight: FontWeight.w700,
                      color: Color(0xFF2C3E50),
                    ),
                  ),
                ),
                const SizedBox(height: 10),
                const Center(
                  child: Text(
                    'Create your safety profile',
                    style: TextStyle(fontSize: 16, color: Color(0xFF7F8C8D)),
                  ),
                ),
                const SizedBox(height: 40),

                // Full Name
                _buildTextField(
                  label: 'Full Name',
                  controller: _nameController,
                  hint: 'Eunice',
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter your full name';
                    }
                    if (value.length < 2) {
                      return 'Name must be at least 2 characters';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),

                // Username
                _buildTextField(
                  label: 'Username',
                  controller: _usernameController,
                  hint: 'Baelish😎',
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter a username';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),

                // Email
                _buildTextField(
                  label: 'Email',
                  controller: _emailController,
                  hint: 'example@email.com',
                  keyboardType: TextInputType.emailAddress,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter your email';
                    }
                    if (!RegExp(r'^[^@\s]+@[^@\s]+\.[^@\s]+').hasMatch(value)) {
                      return 'Please enter a valid email address';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),

                // Phone
                _buildTextField(
                  label: 'Phone Number',
                  controller: _phoneController,
                  hint: '+256 700 000 000',
                  keyboardType: TextInputType.phone,
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please enter your phone number';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),

                // Hardware Phone Number Field
                Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      'Helmet Contact',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                        color: Color(0xFF2C3E50),
                      ),
                    ),
                    const SizedBox(height: 8),
                    TextFormField(
                      controller: _helmetContactController,
                      keyboardType: TextInputType.phone,
                      decoration: InputDecoration(
                        hintText: '+256 700 000 000',
                        labelText: 'Phone Number',
                        filled: true,
                        fillColor: Colors.white,
                        prefixIcon: Icon(Icons.phone),
                        border: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                          borderSide: BorderSide(
                            color: Color(0xFFE8E8E8),
                            width: 2,
                          ),
                        ),
                        enabledBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                          borderSide: const BorderSide(
                            color: Color(0xFFE8E8E8),
                            width: 2,
                          ),
                        ),
                        focusedBorder: OutlineInputBorder(
                          borderRadius: BorderRadius.circular(10),
                          borderSide: const BorderSide(
                            color: Color(0xFF4A90E2),
                            width: 2,
                          ),
                        ),
                        contentPadding: const EdgeInsets.all(15),
                      ),
                      validator: (value) {
                        if (value == null || value.isEmpty) {
                          return 'Please enter hardware phone number';
                        }
                        return null;
                      },
                    ),
                  ],
                ),
                const SizedBox(height: 20),

                // Password
                _buildTextField(
                  label: 'Password',
                  controller: _passwordController,
                  hint: 'Create password',
                  obscureText: _obscurePassword,
                  suffixIcon: IconButton(
                    icon: Icon(
                        _obscurePassword ? Icons.visibility_off : Icons.visibility),
                    onPressed: () {
                      setState(() {
                        _obscurePassword = !_obscurePassword;
                      });
                    },
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please create a password';
                    }
                    if (value.length < 6) {
                      return 'Password must be at least 6 characters';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),

                // Confirm Password
                _buildTextField(
                  label: 'Confirm Password',
                  controller: _confirmPasswordController,
                  hint: 'Re-enter password',
                  obscureText: _obscureConfirmPassword,
                  suffixIcon: IconButton(
                    icon: Icon(_obscureConfirmPassword
                        ? Icons.visibility_off
                        : Icons.visibility),
                    onPressed: () {
                      setState(() {
                        _obscureConfirmPassword = !_obscureConfirmPassword;
                      });
                    },
                  ),
                  validator: (value) {
                    if (value == null || value.isEmpty) {
                      return 'Please confirm your password';
                    }
                    if (value != _passwordController.text) {
                      return 'Passwords do not match';
                    }
                    return null;
                  },
                ),
                const SizedBox(height: 20),

                // Create Account Button
                SizedBox(
                  width: double.infinity,
                  height: 50,
                  child: ElevatedButton(
                    style: ElevatedButton.styleFrom(
                      backgroundColor: const Color(0xFFFF6B6B),
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(10),
                      ),
                    ),
                    onPressed: _isLoading ? null : _handleRegister,
                    child: _isLoading
                        ? const CircularProgressIndicator(color: Colors.white)
                        : const Text(
                            'Create Account',
                            style: TextStyle(
                              fontSize: 18,
                              fontWeight: FontWeight.w600,
                              color: Colors.white,
                            ),
                          ),
                  ),
                ),
                const SizedBox(height: 20),

                // Already have account
                Center(
                  child: TextButton(
                    onPressed: () => Navigator.pop(context),
                    child: const Text(
                      'Already have an account?',
                      style: TextStyle(
                        fontSize: 16,
                        fontWeight: FontWeight.w500,
                        color: Color(0xFF4A90E2),
                      ),
                    ),
                  ),
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }

  Widget _buildTextField({
    required String label,
    required TextEditingController controller,
    String? hint,
    TextInputType keyboardType = TextInputType.text,
    bool obscureText = false,
    Widget? suffixIcon,
    String? Function(String?)? validator,
  }) {
    return Column(
      crossAxisAlignment: CrossAxisAlignment.start,
      children: [
        Text(
          label,
          style: const TextStyle(
            fontSize: 16,
            fontWeight: FontWeight.w500,
            color: Color(0xFF2C3E50),
          ),
        ),
        const SizedBox(height: 8),
        TextFormField(
          controller: controller,
          keyboardType: keyboardType,
          obscureText: obscureText,
          decoration: InputDecoration(
            hintText: hint,
            suffixIcon: suffixIcon,
            filled: true,
            fillColor: Colors.white,
            border: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: const BorderSide(color: Color(0xFFE8E8E8), width: 2),
            ),
            enabledBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: const BorderSide(color: Color(0xFFE8E8E8), width: 2),
            ),
            focusedBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: const BorderSide(color: Color(0xFF4A90E2), width: 2),
            ),
            errorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: const BorderSide(color: Colors.red, width: 2),
            ),
            focusedErrorBorder: OutlineInputBorder(
              borderRadius: BorderRadius.circular(10),
              borderSide: const BorderSide(color: Colors.red, width: 2),
            ),
            contentPadding: const EdgeInsets.all(15),
          ),
          validator: validator,
        ),
      ],
    );
  }

  Future<void> _handleRegister() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() => _isLoading = true);

    try {
      // Initialize SMS service with user data
      SmsService.initUserData(
        _nameController.text.trim(),
        _phoneController.text.trim(),
      );

      // Send contact info to hardware
      final smsSuccess = await SmsService.sendContactToHardware(
        _helmetContactController.text.trim(),
      );

      if (!smsSuccess) {
        throw 'Failed to register with hardware';
      }

      // Save user data to Firestore
      await _userService.saveUserDataCustom(
        fullName: _nameController.text.trim(),
        username: _usernameController.text.trim(),
        email: _emailController.text.trim(),
        phone: _phoneController.text.trim(),
        hardwareContact: _helmetContactController.text.trim(),
        password: _passwordController.text.trim(),
      );

      if (!mounted) return;
      Navigator.pushReplacement(
        context,
        MaterialPageRoute(
          builder: (_) => HomeScreen(
            toggleTheme: widget.toggleTheme,
            isDarkTheme: widget.isDarkTheme,
          ),
        ),
      );
    } catch (e) {
      if (!mounted) return;
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(
          content: Text('Registration failed: $e'),
          backgroundColor: Colors.red,
        ),
      );
    } finally {
      if (mounted) {
        setState(() => _isLoading = false);
      }
    }
  }
}
================================================================================

------lib\services\auth_service.dart
import 'package:firebase_auth/firebase_auth.dart';

class AuthService {
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // Sign in with email and password
  Future<User?> signIn(String email, String password) async {
    try {
      UserCredential result = await _auth.signInWithEmailAndPassword(
          email: email, password: password);
      return result.user;
    } catch (e) {
      print('Error in signIn: $e');
      return null;
    }
  }

  // Register with email and password
  Future<User?> register(String email, String password) async {
    try {
      UserCredential result = await _auth.createUserWithEmailAndPassword(
          email: email, password: password);
      return result.user;
    } catch (e) {
      print('Error in register: $e');
      return null;
    }
  }

  // Sign out
  Future<void> signOut() async {
    await _auth.signOut();
  }

  // Get current user
  User? get currentUser => _auth.currentUser;
}

================================================================================

------lib\services\location_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'dart:math';

class LocationService {
  final FirebaseFirestore _db = FirebaseFirestore.instance;
  final FirebaseAuth _auth = FirebaseAuth.instance;

  // Save real-time location from helmet
  Future<void> saveLocation({
    required double latitude,
    required double longitude,
    required String helmetId,
    String? address,
    double? speed,
    double? heading,
    Map<String, dynamic>? safetyData,
  }) async {
    final userId = _auth.currentUser?.uid;
    if (userId == null) return;

    await _db.collection('locations').add({
      'userId': userId,
      'helmetId': helmetId,
      'latitude': latitude,
      'longitude': longitude,
      'address': address,
      'speed': speed,
      'heading': heading,
      'safetyData': safetyData,
      'timestamp': FieldValue.serverTimestamp(),
      'isActive': true,
      'isEmergency': false,
    });

    // update user's current location
    await _db.collection('users').doc(userId).update({
      'currentLocation': {
        'latitude': latitude,
        'longitude': longitude,
        'timestamp': FieldValue.serverTimestamp(),
      }
    });
  }

  // Get user's current location
  Future<Map<String, dynamic>?> getCurrentLocation(String userId) async {
    final doc = await _db.collection('users').doc(userId).get();
    if (doc.exists && doc.data()?['currentLocation'] != null) {
      return doc.data()?['currentLocation'] as Map<String, dynamic>;
    }
    return null;
  }

  // Get location history for emergency tracking
  Stream<QuerySnapshot> getLocationHistory(String userId, {int limit = 100}) {
    return _db
        .collection('emergency_locations')
        .where('userId', isEqualTo: userId)
        .orderBy('timestamp', descending: true)
        .limit(limit)
        .snapshots();
  }

  // Save emergency location when crash is detected
  Future<void> saveEmergencyLocation({
    required double latitude,
    required double longitude,
    required String helmetId,
    required String alertType,
    String? additionalInfo,
    Map<String, dynamic>? crashData,
  }) async {
    final userId = _auth.currentUser?.uid;
    if (userId == null) return;

    await _db.collection('emergency_locations').add({
      'userId': userId,
      'helmetId': helmetId,
      'latitude': latitude,
      'longitude': longitude,
      'alertType': alertType, // i was thinking that we have diff alerts; crash, panic, low_battery, etc.
      'additionalInfo': additionalInfo,
      'crashData': crashData,
      'timestamp': FieldValue.serverTimestamp(),
      'isEmergency': true,
      'isResolved': false,
      'responseTime': null,
    });
  }

  // Get emergency locations for monitoring dashboard
  Stream<QuerySnapshot> getEmergencyLocations() {
    return _db
        .collection('emergency_locations')
        .where('isResolved', isEqualTo: false)
        .orderBy('timestamp', descending: true)
        .snapshots();
  }

  // Mark emergency as resolved
  Future<void> resolveEmergency(String emergencyId) async {
    await _db.collection('emergency_locations').doc(emergencyId).update({
      'isResolved': true,
      'resolvedAt': FieldValue.serverTimestamp(),
    });
  }

  // Get nearby riders
  Future<List<Map<String, dynamic>>> getNearbyRiders({
    required double latitude,
    required double longitude,
    double radiusKm = 5.0,
  }) async {
    // Guys we might have to use GeoFirestore for better calculations. I've left these simplified ones as place holders
    final snapshot = await _db
        .collection('users')
        .where('currentLocation', isNotEqualTo: null)
        .get();

    List<Map<String, dynamic>> nearbyRiders = [];

    for (var doc in snapshot.docs) {
      final data = doc.data();
      final currentLocation = data['currentLocation'] as Map<String, dynamic>?;

      if (currentLocation != null) {
        final riderLat = currentLocation['latitude'] as double;
        final riderLng = currentLocation['longitude'] as double;

        // Calculate distance
        final distance = _calculateDistance(latitude, longitude, riderLat, riderLng);

        if (distance <= radiusKm) {
          nearbyRiders.add({
            'userId': doc.id,
            'username': data['username'] ?? 'Unknown',
            'latitude': riderLat,
            'longitude': riderLng,
            'distance': distance,
          });
        }
      }
    }

    return nearbyRiders;
  }

  double _calculateDistance(double lat1, double lng1, double lat2, double lng2) {
    const double earthRadius = 6371; // km
    final double dLat = _toRadians(lat2 - lat1);
    final double dLng = _toRadians(lng2 - lng1);

    final double a =
        sin(dLat / 2) * sin(dLat / 2) +
            cos(_toRadians(lat1)) * cos(_toRadians(lat2)) *
                sin(dLng / 2) * sin(dLng / 2);

    final double c = 2 * asin(sqrt(a));
    return earthRadius * c;
  }

  double _toRadians(double degrees) {
    return degrees * (pi / 180);
  }
}

================================================================================

------lib\services\maps_service.dart
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'dart:math';
import '../config/api_config.dart';

class MapsService {
  static final _cache = <String, List<Map<String, dynamic>>>{};
  static DateTime? _lastFetchTime;

  static Future<List<Map<String, dynamic>>> fetchNearbyHospitals(
    double lat,
    double lng, {
    int radius = 5000,
    bool useCache = true,
  }) async {
    final cacheKey = 'hospitals_${lat}_$lng';
    
    if (useCache && 
        _cache.containsKey(cacheKey) && 
        _lastFetchTime != null && 
        DateTime.now().difference(_lastFetchTime!) < Duration(minutes: 5)) {
      return _cache[cacheKey]!;
    }

    const endpoint = 'https://maps.googleapis.com/maps/api/place/nearbysearch/json';
    final url = Uri.parse('$endpoint?'
        'location=$lat,$lng'
        '&radius=$radius'
        '&type=hospital'
        '&key=${ApiConfig.mapsApiKey}');

    try {
      final response = await http.get(url);
      if (response.statusCode == 200) {
        final data = _parseHospitalResponse(response.body, lat, lng);
        _cache[cacheKey] = data;
        _lastFetchTime = DateTime.now();
        return data;
      }
      return [];
    } catch (e) {
      print('Hospital fetch error: $e');
      return [];
    }
  }

  static List<Map<String, dynamic>> _parseHospitalResponse(
      String response, double originLat, double originLng) {
    try {
      final jsonData = jsonDecode(response);
      final results = (jsonData['results'] as List).map((hospital) {
        final lat = hospital['geometry']['location']['lat'];
        final lng = hospital['geometry']['location']['lng'];
        return {
          'name': hospital['name']?.toString() ?? 'Unknown Hospital',
          'vicinity': hospital['vicinity']?.toString() ?? 'Address not available',
          'distance': _calculateDistance(originLat, originLng, lat, lng)
              .toStringAsFixed(1),
          'latitude': lat,
          'longitude': lng,
        };
      }).toList();

      results.sort((a, b) => double.parse(a['distance']!)
          .compareTo(double.parse(b['distance']!)));
      return results;
    } catch (e) {
      print('Response parsing error: $e');
      return [];
    }
  }

  static double _calculateDistance(lat1, lng1, lat2, lng2) {
    const earthRadius = 6371; // km
    final dLat = _toRadians(lat2 - lat1);
    final dLng = _toRadians(lng2 - lng1);

    final a = sin(dLat / 2) * sin(dLat / 2) +
        cos(_toRadians(lat1)) *
            cos(_toRadians(lat2)) *
            sin(dLng / 2) *
            sin(dLng / 2);
    final c = 2 * atan2(sqrt(a), sqrt(1 - a));
    return earthRadius * c;
  }

  static double _toRadians(double degrees) => degrees * (pi / 180);
}
================================================================================

------lib\services\sms_service.dart
import 'package:telephony/telephony.dart';
import 'package:geolocator/geolocator.dart';
import 'package:cloud_firestore/cloud_firestore.dart';

class SmsService {
  static final Telephony telephony = Telephony.instance;
  static String? _trustedNumber;
  static String? _currentUserName;
  static String? _currentUserPhone;

  // Initialize with user data
  static void initUserData(String name, String phone) {
    _currentUserName = name;
    _currentUserPhone = phone;
  }
  // Add this method to your SmsService class
static Future<bool> sendContactToHardware(String hardwareNumber) async {
  if (_currentUserName == null || _currentUserPhone == null) {
    throw 'User data not initialized';
  }

  try {
    await telephony.sendSms(
      to: hardwareNumber,
      message: '$_currentUserName - $_currentUserPhone',
    );
    return true;
  } catch (e) {
    throw 'Failed to send SMS to hardware: $e';
  }
}
  // Getter for hardware contact
  static String? get hardwareContact => _trustedNumber;

  // Load trusted number from Firestore
  static Future<void> loadTrustedNumberFromFirestore() async {
    try {
      DocumentSnapshot configDoc = await FirebaseFirestore.instance
          .collection('settings')
          .doc('app_config')
          .get();

      if (configDoc.exists) {
        _trustedNumber = configDoc.get('trustedPhoneNumber')?.toString();
      }
    } catch (e) {
      print('Error loading trusted number: $e');
    }
  }

  // Send SMS message
  static Future<bool> sendSms(String number, String message) async {
    try {
      await telephony.sendSms(to: number, message: message);
      return true;
    } catch (e) {
      print('Failed to send SMS: $e');
      return false;
    }
  }

  // Initialize SMS listener
  static void initSmsListener() {
    telephony.listenIncomingSms(
      onNewMessage: _handleIncomingSms,
      onBackgroundMessage: _backgroundMessageHandler,
    );
  }

  // Background message handler
  static Future<void> _backgroundMessageHandler(SmsMessage message) async {
    await _handleIncomingSms(message);
  }

  // Handle incoming messages
  static Future<void> _handleIncomingSms(SmsMessage message) async {
    if (_trustedNumber == null) {
      await loadTrustedNumberFromFirestore();
    }

    if (message.address == _trustedNumber && 
        message.body?.toLowerCase().contains('user needs help') == true) {
      await _handleEmergencyRequest(message.address!);
    }
  }

  static Future<void> _handleEmergencyRequest(String sender) async {
    try {
      final position = await _getCurrentPosition();
      // Add your emergency response logic here
      await sendSms(sender, 'Emergency response initiated');
    } catch (e) {
      print('Error handling emergency: $e');
    }
  }

  static Future<Position> _getCurrentPosition() async {
    return await Geolocator.getCurrentPosition(
      desiredAccuracy: LocationAccuracy.high,
    );
  }
}
================================================================================

------lib\services\user_service.dart
import 'package:cloud_firestore/cloud_firestore.dart';

class UserService {
  final FirebaseFirestore _db = FirebaseFirestore.instance;

  // Get user by phone number
  Future<Map<String, dynamic>?> getUserByPhone(String phone) async {
    final query = await _db
        .collection('users')
        .where('phone', isEqualTo: phone)
        .limit(1)
        .get();
    if (query.docs.isNotEmpty) {
      // Return the data of the first document found
      return query.docs.first.data();
    }
    return null;
  }

  // Get user data by User ID (UID)
  // This is crucial for fetching the currently logged-in user's profile information.
  Future<Map<String, dynamic>?> getUserData(String uid) async {
    try {
      // Fetch the document directly using the UID as the document ID
      DocumentSnapshot doc = await _db.collection('users').doc(uid).get();
      if (doc.exists) {
        return doc.data() as Map<String, dynamic>?;
      }
      return null;
    } catch (e) {
      print('Error getting user data: $e');
      return null;
    }
  }

  // Save new user data when a user registers
  Future<void> saveUserDataCustom({
    required String fullName,
    required String username,
    required String email,
    required String phone,
    required String hardwareContact,
    required String password,
  }) async {
    // When saving new user data, it's often good practice to use the
    // Firebase Auth UID as the document ID in Firestore for easier retrieval.
    // However, based on your `getUserByPhone` and current `saveUserDataCustom`,
    // it seems you're using `add` which creates an auto-generated ID.
    // If you intend to fetch by UID, you should store the UID as the document ID
    // during registration or link the user's phone to a Firebase Auth user.
    // For now, I'll keep the `add` method as it was, but be aware of this.
    await _db.collection('users').add({
      'fullName': fullName,
      'username': username,
      'email': email,
      'phone': phone,
      'hardwareContact': hardwareContact,
      'password': password, // Remember: Store hashed passwords in production!
      'createdAt': FieldValue.serverTimestamp(),
    });
  }

  // Update existing user data by User ID (UID)
  // This method will be used by the ProfileScreen to save edited information.
  Future<void> updateUserData(String uid, Map<String, dynamic> data) async {
    try {
      // Update the document corresponding to the user's UID
      await _db.collection('users').doc(uid).update(data);
      print('User data updated successfully for UID: $uid');
    } catch (e) {
      print('Error updating user data for UID $uid: $e');
      // You might want to throw an exception or return a boolean to indicate success/failure
      rethrow; // Re-throw the error so the calling widget can handle it
    }
  }
}

================================================================================

------lib\utils\location_utils.dart
import 'dart:math';

class LocationUtils {
  static Future<List<String>> getNearbyHospitals(double lat, double lng) async {
    return [
      "Mulago Hospital - 0.338,32.581",
      "Nakasero Hospital - 0.318,32.585",
      "Case Clinic - 0.313,32.582"
    ];
  }

  static Future<List<String>> getNearbyUsers(double lat, double lng) async {
    return [
      "User1 - 0.320,32.579",
      "User2 - 0.322,32.583",
      "User3 - 0.324,32.588",
      "User4 - 0.328,32.590",
      "User5 - 0.330,32.593"
    ];
  }

  static double calculateDistance(double lat1, double lon1, double lat2, double lon2) {
    const earthRadius = 6371;
    final dLat = _toRadians(lat2 - lat1);
    final dLon = _toRadians(lon2 - lon1);
    final a = sin(dLat / 2) * sin(dLat / 2) +
        cos(_toRadians(lat1)) * cos(_toRadians(lat2)) *
            sin(dLon / 2) * sin(dLon / 2);
    final c = 2 * atan2(sqrt(a), sqrt(1 - a));
    return earthRadius * c;
  }

  static double _toRadians(double degree) {
    return degree * pi / 180;
  }
}

================================================================================

